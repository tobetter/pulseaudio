From: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
Date: Sun, 20 Jul 2014 01:27:09 -0300
Subject: [PATCH] module-switch-on-connect: adding parameter to allow
 skipping abstract devices

Signed-off-by: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
---
 src/modules/module-switch-on-connect.c | 27 +++++++++++++++++++++++++--
 1 file changed, 25 insertions(+), 2 deletions(-)

diff --git a/src/modules/module-switch-on-connect.c b/src/modules/module-switch-on-connect.c
index efe1270..f2531ed 100644
--- a/src/modules/module-switch-on-connect.c
+++ b/src/modules/module-switch-on-connect.c
@@ -41,8 +41,11 @@ PA_MODULE_AUTHOR("Michael Terry");
 PA_MODULE_DESCRIPTION("When a sink/source is added, switch to it");
 PA_MODULE_VERSION(PACKAGE_VERSION);
 PA_MODULE_LOAD_ONCE(TRUE);
+PA_MODULE_USAGE(
+        "skip_abstract=<yes or no>");
 
 static const char* const valid_modargs[] = {
+    "skip_abstract",
     NULL,
 };
 
@@ -50,13 +53,15 @@ struct userdata {
     pa_hook_slot
         *sink_put_slot,
         *source_put_slot;
+    pa_bool_t skip_abstract;
 };
 
 static pa_hook_result_t sink_put_hook_callback(pa_core *c, pa_sink *sink, void* userdata) {
     pa_sink_input *i;
     uint32_t idx;
     pa_sink *def;
-    const char *s;
+    const char *s, *class;
+    struct userdata *u = userdata;
 
     pa_assert(c);
     pa_assert(sink);
@@ -73,6 +78,12 @@ static pa_hook_result_t sink_put_hook_callback(pa_core *c, pa_sink *sink, void*
             return PA_HOOK_OK;
     }
 
+    /* Check if we want or to skip abstract devices (e.g. null) */
+    if ((class = pa_proplist_gets(sink->proplist, PA_PROP_DEVICE_CLASS))) {
+        if (pa_streq(class, "abstract") && (u->skip_abstract))
+            return PA_HOOK_OK;
+    }
+
     def = pa_namereg_get_default_sink(c);
     if (def == sink)
         return PA_HOOK_OK;
@@ -105,7 +116,8 @@ static pa_hook_result_t source_put_hook_callback(pa_core *c, pa_source *source,
     pa_source_output *o;
     uint32_t idx;
     pa_source *def;
-    const char *s;
+    const char *s, *class;
+    struct userdata *u = userdata;
 
     pa_assert(c);
     pa_assert(source);
@@ -126,6 +138,12 @@ static pa_hook_result_t source_put_hook_callback(pa_core *c, pa_source *source,
             return PA_HOOK_OK;
     }
 
+    /* Check if we want or to skip abstract devices (e.g. null) */
+    if ((class = pa_proplist_gets(source->proplist, PA_PROP_DEVICE_CLASS))) {
+        if (pa_streq(class, "abstract") && (u->skip_abstract))
+            return PA_HOOK_OK;
+    }
+
     def = pa_namereg_get_default_source(c);
     if (def == source)
         return PA_HOOK_OK;
@@ -167,6 +185,11 @@ int pa__init(pa_module*m) {
 
     m->userdata = u = pa_xnew(struct userdata, 1);
 
+    if (pa_modargs_get_value_boolean(ma, "skip_abstract", &u->skip_abstract) < 0) {
+        pa_log_error("skip_abstract= expects a boolean argument, assuming FALSE by default");
+        u->skip_abstract = FALSE;
+    }
+
     /* A little bit later than module-rescue-streams... */
     u->sink_put_slot = pa_hook_connect(&m->core->hooks[PA_CORE_HOOK_SINK_PUT], PA_HOOK_LATE+30, (pa_hook_cb_t) sink_put_hook_callback, u);
     u->source_put_slot = pa_hook_connect(&m->core->hooks[PA_CORE_HOOK_SOURCE_PUT], PA_HOOK_LATE+20, (pa_hook_cb_t) source_put_hook_callback, u);
-- 
2.0.1

