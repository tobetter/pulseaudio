From: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
Date: Sun, 20 Jul 2014 01:27:09 -0300
Subject: [PATCH] module-switch-on-connect: adding parameter to allow
 skipping abstract devices

Signed-off-by: Ricardo Salveti de Araujo <ricardo.salveti@canonical.com>
---
 src/modules/module-switch-on-connect.c | 27 +++++++++++++++++++++++++--
 1 file changed, 25 insertions(+), 2 deletions(-)

Index: pulseaudio/src/modules/module-switch-on-connect.c
===================================================================
--- pulseaudio.orig/src/modules/module-switch-on-connect.c
+++ pulseaudio/src/modules/module-switch-on-connect.c
@@ -41,10 +41,12 @@ PA_MODULE_VERSION(PACKAGE_VERSION);
 PA_MODULE_LOAD_ONCE(true);
 PA_MODULE_USAGE(
         "only_from_unavailable=<boolean, only switch from unavailable ports> "
+        "skip_abstract=<yes or no>"
 );
 
 static const char* const valid_modargs[] = {
     "only_from_unavailable",
+    "skip_abstract",
     NULL,
 };
 
@@ -53,13 +55,14 @@ struct userdata {
         *sink_put_slot,
         *source_put_slot;
     bool only_from_unavailable;
+    bool skip_abstract;
 };
 
 static pa_hook_result_t sink_put_hook_callback(pa_core *c, pa_sink *sink, void* userdata) {
     pa_sink_input *i;
     uint32_t idx;
     pa_sink *def;
-    const char *s;
+    const char *s, *class;
     struct userdata *u = userdata;
 
     pa_assert(c);
@@ -78,6 +81,12 @@ static pa_hook_result_t sink_put_hook_ca
             return PA_HOOK_OK;
     }
 
+    /* Check if we want or to skip abstract devices (e.g. null) */
+    if ((class = pa_proplist_gets(sink->proplist, PA_PROP_DEVICE_CLASS))) {
+        if (pa_streq(class, "abstract") && (u->skip_abstract))
+            return PA_HOOK_OK;
+    }
+
     def = pa_namereg_get_default_sink(c);
     if (def == sink)
         return PA_HOOK_OK;
@@ -114,7 +123,7 @@ static pa_hook_result_t source_put_hook_
     pa_source_output *o;
     uint32_t idx;
     pa_source *def;
-    const char *s;
+    const char *s, *class;
     struct userdata *u = userdata;
 
     pa_assert(c);
@@ -137,6 +146,12 @@ static pa_hook_result_t source_put_hook_
             return PA_HOOK_OK;
     }
 
+    /* Check if we want or to skip abstract devices (e.g. null) */
+    if ((class = pa_proplist_gets(source->proplist, PA_PROP_DEVICE_CLASS))) {
+        if (pa_streq(class, "abstract") && (u->skip_abstract))
+            return PA_HOOK_OK;
+    }
+
     def = pa_namereg_get_default_source(c);
     if (def == source)
         return PA_HOOK_OK;
@@ -182,6 +197,11 @@ int pa__init(pa_module*m) {
 
     m->userdata = u = pa_xnew0(struct userdata, 1);
 
+    if (pa_modargs_get_value_boolean(ma, "skip_abstract", &u->skip_abstract) < 0) {
+        pa_log_error("skip_abstract= expects a boolean argument, assuming false by default");
+        u->skip_abstract = false;
+    }
+
     /* A little bit later than module-rescue-streams... */
     u->sink_put_slot = pa_hook_connect(&m->core->hooks[PA_CORE_HOOK_SINK_PUT], PA_HOOK_LATE+30, (pa_hook_cb_t) sink_put_hook_callback, u);
     u->source_put_slot = pa_hook_connect(&m->core->hooks[PA_CORE_HOOK_SOURCE_PUT], PA_HOOK_LATE+20, (pa_hook_cb_t) source_put_hook_callback, u);
