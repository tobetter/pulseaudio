From: Ricardo Salveti de Araujo <rsalveti@rsalveti.net>
Date: Fri, 15 Aug 2014 02:15:16 -0300
Subject: [PATCH] module-device-restore: adding property to skip store/restore

Useful when the user wants to control the volume/port/mute without
storing/restoring the values, at least temporarily (until the property
gets unset).

Signed-off-by: Ricardo Salveti de Araujo <rsalveti@rsalveti.net>

diff --git a/src/modules/module-device-restore.c b/src/modules/module-device-restore.c
index 8360a05..e959e2c 100644
--- a/src/modules/module-device-restore.c
+++ b/src/modules/module-device-restore.c
@@ -53,6 +53,7 @@
 #include <pulsecore/pstream-util.h>
 #include <pulsecore/database.h>
 #include <pulsecore/tagstruct.h>
+#include <pulsecore/proplist-util.h>
 
 #include "module-device-restore-symdef.h"
 
@@ -67,6 +68,7 @@ PA_MODULE_USAGE(
         "restore_formats=<Save/restore saved formats?>");
 
 #define SAVE_INTERVAL (10 * PA_USEC_PER_SEC)
+#define MODULE_DEVICE_RESTORE_SKIP_PROPERTY "module-device-restore.skip"
 
 static const char* const valid_modargs[] = {
     "restore_volume",
@@ -613,6 +615,9 @@ static void subscribe_callback(pa_core *c, pa_subscription_event_type_t t, uint3
         if (!(sink = pa_idxset_get_by_index(c->sinks, idx)))
             return;
 
+        if (pa_proplist_gets(sink->proplist, MODULE_DEVICE_RESTORE_SKIP_PROPERTY))
+            return;
+
         type = PA_DEVICE_TYPE_SINK;
         name = pa_sprintf_malloc("sink:%s", sink->name);
         if (sink->active_port)
@@ -652,6 +657,9 @@ static void subscribe_callback(pa_core *c, pa_subscription_event_type_t t, uint3
         if (!(source = pa_idxset_get_by_index(c->sources, idx)))
             return;
 
+        if (pa_proplist_gets(source->proplist, MODULE_DEVICE_RESTORE_SKIP_PROPERTY))
+            return;
+
         type = PA_DEVICE_TYPE_SOURCE;
         name = pa_sprintf_malloc("source:%s", source->name);
         if (source->active_port)
@@ -819,6 +827,9 @@ static pa_hook_result_t sink_port_hook_callback(pa_core *c, pa_sink *sink, struc
     pa_assert(u);
     pa_assert(u->restore_volume || u->restore_muted);
 
+    if (pa_proplist_gets(sink->proplist, MODULE_DEVICE_RESTORE_SKIP_PROPERTY))
+        return PA_HOOK_OK;
+
     name = pa_sprintf_malloc("sink:%s", sink->name);
 
     if ((e = perportentry_read(u, name, (sink->active_port ? sink->active_port->name : NULL)))) {
@@ -962,6 +973,9 @@ static pa_hook_result_t source_port_hook_callback(pa_core *c, pa_source *source,
     pa_assert(u);
     pa_assert(u->restore_volume || u->restore_muted);
 
+    if (pa_proplist_gets(source->proplist, MODULE_DEVICE_RESTORE_SKIP_PROPERTY))
+        return PA_HOOK_OK;
+
     name = pa_sprintf_malloc("source:%s", source->name);
 
     if ((e = perportentry_read(u, name, (source->active_port ? source->active_port->name : NULL)))) {
-- 
2.1.0.rc1

